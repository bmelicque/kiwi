export function Sum(t,v){this.tag=t;this.value=v}
export class Option extends Sum{}
export class Pointer{constructor(c,n){this.c=c;this.n=n}get(){return this.c?.[this.n]??this.n}set(v){this.c?(this.c[this.n]=v):(this.n=v)}}
export class NodePointer{constructor(v){this._=v}get(){return this._}set(v){this._.parentNode?.replaceChild(this._,v);this._=v}}
export let equals=(a,b,t=typeof a)=>(t==typeof b&&(t!="object"||a==null||b==null?a==b:a.constructor==b.constructor&&(a instanceof NodePointer?a.get()==b.get():!(Array.isArray(a)&&a.length-b.length)&&!Object.keys(a).find(k=>!equals(a[k],b[k])))))
export let wrapNodeMethod=(o,m,r,n=NodePointer,f=(...a)=>o[m].apply(o,a.map(a=>a instanceof n?a.get():a)))=>(typeof o[m]!="function"?r?()=>new n(o[m]):()=>o[m]:r?(...a)=>new n(f(...a)):f)
export let bind=(o,m)=>(o[m].bind(o))
export let getDocument=()=>new NodePointer(document)
export let createElement=s=>{let[a,t,i,c]=s.match(/^(\w[\w\-_]*)?(?:#(\w[\w\-_]*))?((?:\.\w[\w\-_]*)*)$/);if(!a)throw new Error("Invalid selector");let e=document.createElement(t||"div");if(i)e.id=i;if(c)e.classList.add(...c.split(".").slice(1));return e}
export class DocumentBody extends Sum{}
export let getDocumentBody=d=>(d instanceof NodePointer&&(d=d.get()),()=>d.body?new Option("Some",new DocumentBody(d.body instanceof HTMLBodyElement?"Body":"Frame",d.body)):new Option("None"))
export let setDocumentBody=d=>(d instanceof NodePointer&&(d=d.get()),b=>d.body=b.value)